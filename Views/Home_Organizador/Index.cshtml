<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emissor de Certificados</title>
    <link rel="stylesheet" href="~/css/Home_Organizador.css" asp-append-version="true">
    <script src="~/js/Home_Organizador.js" asp-append-version="true"></script>
    <script src="~/js/site.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
</head>
<body>

    <header>
        <img id="logo" src="/logoemescam.png" alt="Logo Emescam">
        <nav>
            <a href="#" onclick="mostrarCard('meus-eventos')">Meus Eventos</a>
            <a href="#" onclick="mostrarCard('buscar-pessoas')">Buscar Pessoas</a>
            <a href="#" onclick="mostrarCard('configuracoes')">Configurações</a>
        </nav>
        <div id="dropdown-container">
            <div id="bem-vindo">Bem-Vindo! @ViewBag.Login</div>
            <div id="dropdown-content">
                <a id="sair-link" href="#">Sair</a>
            </div>
        </div>
    </header>


    <div class="cartao-menu">
       

        <!--CADASTRAR EVENTO-->
        <!-- Formulário para cadastro de evento -->
        <div id="card-evento" class="card">
            <h3>Novo Evento</h3>
            <hr>
            <form id="formEvento" asp-controller="Home_Organizador" asp-action="NovoEvento" method="post" enctype="multipart/form-data">
                <!-- Input para o nome do evento -->
                <input type="text" id="nomeEvento" name="nomeEvento" placeholder="Nome do Evento" required>
                <hr>
                <!-- Campos de entrada para dados -->
                <div class="dados-form">
                    <div id="divDados">
                        <input type="text" id="inputNome" placeholder="Nome">
                        <input type="text" id="inputCPF" placeholder="CPF" oninput="permitirApenasNumeros(this)">
                        <input type="text" id="inputEmail1" placeholder="Email">
                        <input type="text" id="tipoPessoa" placeholder="Tipo Pessoa">
                    </div>
                    <textarea id="textareaTexto" placeholder="Texto"></textarea>
                </div>
                <button type="button" id="botaoAcao" onclick="adicionarLinha()">Adicionar Dados</button>
                <button type="button" id="confirmarAtualizacaoBtn" onclick="confirmarAtualizacao()" style="display:none;">Confirmar Atualização</button>
                <hr>
                <!-- Tabela que será preenchida -->

                <button id="btnLimparTabela" onclick="limparTabela()">Limpar Tabela</button>

                <div class="tabela-container">
                    <table id="tabela" class="display">
                        <thead>
                            <tr>
                                <th style="width: 20%">Nome</th>
                                <th style="width: 10%">CPF</th>
                                <th style="width: 15%">Email</th>
                                <th style="width: 10%">Tipo Pessoa</th>
                                <th style="width: 40%">Texto</th>
                                <th style="width: 5%">Ações</th>
                            </tr>
                        </thead>
                        <tbody id="eventos-tbody">
                            <!-- Os dados serão inseridos dinamicamente aqui -->
                        </tbody>
                    </table>
                </div>
                <div class="upload-container">
                    <!-- Botão de importar EXCEL -->
                    <input type="file" id="excelFile" accept=".xlsx" style="display:none" onchange="importarExcel()">
                    <label for="excelFile" class="custom-file-upload">
                        Importar Pessoas
                    </label>
                    <span id="fileName" style="margin-left: 10px;"></span>
                    <br>
                    <!-- Botão de importar Certificado -->
                    <input type="file" id="arteCertificadoFile" name="arteCertificadoFile" accept=".jpeg, .jpg" style="display:none">
                    <label for="arteCertificadoFile" class="custom-file-upload">
                        Selecionar Certificado
                    </label>
                    <span id="certificadoFileName" style="margin-left: 10px;"></span>
                </div>
                <input type="hidden" id="tableData" name="tableData">
                <button type="submit" id="CadastrarEvento">Cadastrar Evento</button>
            </form>
        </div>


        <!-- MEUS EVENTOS -->
        <div id="card-meus-eventos" class="card">
            <h4>Meus Eventos</h4>
            <button class="botao-adicionar" onclick="exibirFormularioAdicionar()"></button>
            <input type="text" id="campo-pesquisa" placeholder="Pesquisar eventos..." onkeyup="filtrarEventos()">
            <hr>
            <div class="tabela-eventos">
                <table>
                    <thead>
                        <tr>
                            <th style="width:5%; text-align: center;">Código</th>
                            <th style="width:55%; text-align: center;">Nome do Evento</th>
                            <th style="width:15%; text-align: center;">Imagem do Certificado</th>
                            <th style="width:25%; text-align: center;">Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var evento in Model)
                        {
                            <tr>
                                <td style="text-align: center;">@evento.Id</td>
                                <td class="evento-nome" style="text-align: center;">@evento.Nome</td>
                                <td style="text-align: center;">
                                    <img src="@Url.Action("VisualizarImagem", "Home_Organizador", new { Id = evento.Id })"
                                         alt="imagem do certificado"
                                         style="width: 60px; height: auto; cursor: pointer;"
                                         onclick="window.open('@Url.Action("VisualizarImagem", "Home_Organizador", new { Id = evento.Id })')">
                                </td>
                                <td style="text-align: center;">
                                    <button class="btn btn-emitir" onclick="abrirCardEmitirCertificado('@evento.Id')">Emitir Certificado</button>
                                    <button class="btn btn-atualizar" onclick="atualizarEvento('@evento.Id', '@evento.Nome')">Incluir Pessoas</button>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Formulário oculto para obter DetalhesEventoPessoas -->
        <form id="formEmitirCertificado" asp-controller="Home_Organizador" asp-action="DetalhesEventoPessoas" method="post" style="display:none;">
            <input type="hidden" id="eventoId" name="idEvento">
            @Html.AntiForgeryToken()
        </form>

        <!-- EMITIR CERTIFICADO -->
        <div id="card-emitir-certificado" class="card" style="display: none;">
            <h4>Emitir Certificado</h4>
            <div class="certificado-info">
                <div class="certificado-detalhes">
                    <input type="text" id="nomeDoEvento" name="nomeDoEvento" readonly>
                </div>
                <div class="certificado-imagem">
                    <img id="imagemCertificado" src="undefined" alt="Imagem do Certificado" style="width: 250px; height: auto; margin-right: 50px;">
                </div>
            </div>
            <div class="tabela-certificados">
                <table>
                    <thead>
                        <tr>
                            <th style="width:5%; text-align: center;">Código</th>
                            <th style="width:50%; text-align: center;">Nome</th>
                            <th style="width:5%; text-align: center;">Certificado Emitido</th>
                            <th style="width:5%; text-align: center;">Retorno Email</th>
                            <th style="width:5%; text-align: center; cursor: pointer;" onclick="toggleSelectAll()">Selecionar</th>
                        </tr>
                    </thead>
                    <tbody id="certificados-tbody">
                        <!-- As pessoas serão preenchidas aqui -->
                    </tbody>
                </table>
            </div>
            <button id="emitirCertificado">Emitir Certificado</button>
        </div>



        <!-- ATUALIZAR EVENTO -->
        <div id="card-atualizar-evento" class="card" style="display: none;">
            <h3>Atualizar Evento</h3>
            <hr>

            <form id="formAtualizarEvento" asp-controller="Home_Organizador" asp-action="AtualizarEvento" method="post" enctype="multipart/form-data">
                <!-- Input para o nome do evento -->
                @Html.AntiForgeryToken()
                <input type="text" id="idEventoAtualizar" name="idEventoAtualizar" placeholder="ID do Evento" readonly>
                <input type="text" id="nomeEventoAtualizar" name="nomeEventoAtualizar" placeholder="Nome do Evento" readonly>

               

                <hr>
                <!--Aqui preenchem os dados-->
                <div id="divDadosAtualizar">
                    <input type="text" id="inputNomeAtualizar" placeholder="Nome">
                    <input type="text" id="inputCPFAtualizar" placeholder="CPF">
                    <input type="text" id="inputEmail1Atualizar" placeholder="Email">
                    <textarea id="inputTextoAtualizar" placeholder="Texto"></textarea>
                </div>

                <button type="button" id="botaoConfirmarAtualizacao" style="display: none;">Confirmar Atualização</button>

                <button type="button" id="botaoAcaoAtualizar" onclick="adicionarDados()">Adicionar Dados</button>
                <hr>

                <!--Tabela que será preenchida-->
                <div class="tabela-container2">
                    <table id="tabelaAtualizar" class="display">
                        <thead>
                            <tr>
                                <th style="width: 20%">Nome</th>
                                <th style="width: 10%">CPF</th>
                                <th style="width: 15%">Email</th>
                                <th style="width: 40%">Texto</th>
                                <th style="width: 5%">Ações</th>
                            </tr>
                        </thead>
                        <tbody id="eventos-tbody-atualizar">
                            <!-- Os dados serão inseridos dinamicamente aqui -->
                        </tbody>
                    </table>
                </div>
                <div class="upload-container2">
                    <!-- Botão de importar EXCEL -->
                    <input type="file" id="excelFileAtualizar" accept=".xlsx" style="display:none" onchange="importarExcelAtualizar()">
                    <label for="excelFileAtualizar" class="custom-file-upload">
                        Importar Pessoas
                    </label>
                    <span id="fileNameAtualizar" style="margin-left: 10px;"></span>
                    <br>
                  
                </div>

                <input type="hidden" id="tableDataAtualizar" name="tableDataAtualizar">
                <button type="submit" id="AtualizarEvento">Atualizar Evento</button>
            </form>
        </div>

        <!-- BUSCAR PESSOAS -->
        <div id="card-buscar-pessoas" class="card">
            <h4>Buscar Pessoas</h4>
            <div>
                <input type="text" id="searchInput" placeholder="Digite o nome da pessoa">
                <button onclick="buscarPessoas()">Buscar</button>
                <hr>
                <div id="resultList">
                    <div class="header">
                        <span style="width:7%" class="col-id">Código</span>
                        <span style="width:80%" class="col-nome">Nome</span>
                        <span style="width:6%" class="col-acoes">Ações</span>
                    </div>
                </div>
                <div class="details" id="details"></div>
            </div>
        </div>

        <!-- CONFIGURAÇÕES -->
        <div id="configuracoes" class="card">
            <h4>Configurações</h4>
            <hr>
            <h6>Remetente</h6>
            <div class="configuracoes-info">
                <div class="configuracao-item">
                    <label for="configuracoesEmail">Email</label>
                    <input type="text" id="configuracoesEmail" placeholder="Email">
                </div>
                <div class="configuracao-item">
                    <label for="configuracoesSenha">Senha</label>
                    <input type="password" id="configuracoesSenha" placeholder="Senha">
                </div>
                <div class="configuracao-item">
                    <label for="configuracoesServidorSMTP">Servidor SMTP</label>
                    <input type="text" id="configuracoesServidorSMTP" placeholder="Servidor SMTP">
                </div>
                <div class="configuracao-item">
                    <label for="configuracoesPorta">Porta</label>
                    <input type="text" id="configuracoesPorta" placeholder="Porta">
                </div>
                <div class="configuracao-item">
                    <label for="configuracoesSSL">SSL</label>
                    <input type="checkbox" id="configuracoesSSL">
                </div>
            </div>
            <div class="button-container">
                <button id="editarRemetente">Editar Remetente</button>
                <button id="salvarRemetente">Salvar Remetente</button>
            </div>

            <hr>
            <h6>Assinatura Digital</h6>
            <div class="assinatura-digital">
                <input type="file" id="assinaturaDigitalInput" accept="image/*">
                <img id="assinaturaDigitalPreview" src="#" alt="Preview da Assinatura Digital">
            </div>
        </div>


       

           



    </div>

    <script>
        window.onload = function () {
            mostrarCard('meus-eventos');
            preencherTabelaEventos();
        };

        document.getElementById('formEvento').addEventListener('submit', function (event) {
            if (!validarAntesDeCadastrar(event)) {
                event.preventDefault(); // Prevenir a submissão do formulário
                // alert("Por favor, corrija os erros antes de cadastrar o evento.");
                return false;
            }
            return true; // Permitir a submissão do formulário
        });

        function validarAntesDeCadastrar(event) {
            var tabela = document.getElementById('tabela');
            var linhas = tabela.getElementsByTagName('tr');
            var temLinhaPreenchida = linhas.length > 1; // Verificar se há mais de uma linha (incluindo o cabeçalho)

            if (!temLinhaPreenchida) {
                alert('A tabela deve ter pelo menos uma linha preenchida.');
                return false;
            }

            if (!destacarCPFsInvalidos()) {
                alert('Existem CPFs inválidos na tabela.');
                return false;
            }

            var certificadoFile = document.getElementById('arteCertificadoFile').files.length > 0;
            if (!certificadoFile) {
                alert('Por favor, selecione uma imagem para o certificado.');
                return false;
            }

            return processarDadosTabela(event);
        }

        //--------- LIMPAR TABELA----------
        function limparTabela() {
            var tabela = document.getElementById('eventos-tbody');
            tabela.innerHTML = ''; // Remove todas as linhas da tabela

            alert("Ação realizada"); // Exibe um alerta ao usuário
        }

        function mostrarCard(id) {
            var cards = document.querySelectorAll('.card');
            cards.forEach(function (card) {
                card.style.display = 'none';
            });

            var cardToShow = document.getElementById('card-' + id) || document.getElementById(id);
            if (cardToShow) {
                cardToShow.style.display = 'block';
            }
        }

        function exibirFormularioAdicionar() {
            var cards = document.querySelectorAll('.card');
            cards.forEach(function (card) {
                card.style.display = 'none';
            });

            var cardNovoEvento = document.getElementById('card-evento');
            if (cardNovoEvento) {
                cardNovoEvento.style.display = 'block';
                cardNovoEvento.scrollIntoView({ behavior: 'smooth' });
            }
        }

        function preencherTabelaEventos() {
            var tabelaEventos = document.getElementById('eventos-tbody');
            tabelaEventos.innerHTML = '';

            eventos.forEach(function (evento) {
                var novaLinha = tabelaEventos.insertRow();

                var celulaCodigo = novaLinha.insertCell(0);
                celulaCodigo.textContent = evento.id;

                var celulaNome = novaLinha.insertCell(1);
                celulaNome.textContent = evento.nome;

                var celulaImagem = novaLinha.insertCell(2);
                var img = document.createElement('img');
                img.src = evento.imagem;
                img.style.width = '60px';
                img.style.cursor = 'pointer';
                img.onclick = function () {
                    window.open(evento.imagem);
                };
                celulaImagem.appendChild(img);

                var celulaAcoes = novaLinha.insertCell(3);
                var botaoEmitir = document.createElement('button');
                botaoEmitir.textContent = 'Emitir certificado';
                botaoEmitir.className = 'btn btn-emitir';
                botaoEmitir.onclick = function () {
                    emitirCertificado(evento.nome);
                };
                celulaAcoes.appendChild(botaoEmitir);

                var botaoAtualizar = document.createElement('button');
                botaoAtualizar.textContent = 'Atualizar';
                botaoAtualizar.className = 'btn btn-atualizar';
                botaoAtualizar.onclick = function () {
                    atualizarEvento(evento.nome);
                };
                celulaAcoes.appendChild(botaoAtualizar);
            });

            destacarCPFsInvalidos();
        }

        function emitirCertificado(id) {
            // Preencher o campo do formulário oculto
            document.getElementById('eventoId').value = id;

            // Submeter o formulário oculto
            document.getElementById('formEmitirCertificado').submit();
        }

        function atualizarEvento(id, nome) {

            // Ocultar todos os cards
            var cards = document.querySelectorAll('.card');
            cards.forEach(function (card) {
                card.style.display = 'none';
            });

            // Mostrar o card de atualizar evento
            var cardAtualizarEvento = document.getElementById('card-atualizar-evento');
            if (cardAtualizarEvento) {
                cardAtualizarEvento.style.display = 'block';
            }

            // Preencher o campo do nome do evento e torná-lo não editável
            var nomeEventoInput = document.getElementById('nomeEventoAtualizar');
            nomeEventoInput.value = nome;
            nomeEventoInput.readOnly = true;
        }



        var modoAdicionar = true;
        var linhaEditavel;

        function adicionarLinha() {
            var nome = document.getElementById("inputNome").value.trim();
            var cpf = document.getElementById("inputCPF").value.trim();
            var email = document.getElementById("inputEmail1").value.trim();
            var tipoPessoa = document.getElementById("tipoPessoa").value.trim();
            var texto = document.getElementById("textareaTexto").value.trim();

            if (nome === "" || cpf === "" || email === "" || tipoPessoa === "" || texto === "") {
                alert("Por favor, preencha todos os campos.");
                return;
            }

            var tabela = document.getElementById("tabela").getElementsByTagName("tbody")[0];
            var novaLinha = tabela.insertRow(-1);

            var celulaNome = novaLinha.insertCell(0);
            var celulaCPF = novaLinha.insertCell(1);
            var celulaEmail = novaLinha.insertCell(2);
            var celulaTipoPessoa = novaLinha.insertCell(3);
            var celulaTexto = novaLinha.insertCell(4);
            var celulaAcoes = novaLinha.insertCell(5); // Ações sempre como última coluna

            celulaNome.textContent = nome;
            celulaCPF.textContent = cpf;
            celulaEmail.textContent = email;
            celulaTipoPessoa.textContent = tipoPessoa;
            celulaTexto.textContent = texto;

            adicionarBotoesLinha(celulaAcoes, novaLinha);
            limparCampos();
            destacarCPFsInvalidos();

            // Remover linhas em branco após adicionar a nova linha
            removerLinhasEmBranco();
        }

        function adicionarBotoesLinha(celulaAcoes, linha) {
            // Checa se a linha contém dados válidos antes de adicionar botões
            var celulas = linha.getElementsByTagName("td");
            var linhaTemDados = Array.from(celulas).some(celula => celula.textContent.trim() !== "");

            if (!linhaTemDados) {
                return; // Sai da função se a linha não tiver dados
            }

            var botaoExcluir = document.createElement("button");
            botaoExcluir.textContent = "Excluir";
            botaoExcluir.className = 'btn table-btn';
            botaoExcluir.onclick = function (event) {
                event.preventDefault(); // Prevenir a ação padrão de submissão do formulário
                if (confirm("Tem certeza de que deseja excluir esta linha?")) {
                    excluirLinha(linha);
                    destacarCPFsInvalidos();
                }
            };
            celulaAcoes.appendChild(botaoExcluir);

            var botaoAtualizar = document.createElement("button");
            botaoAtualizar.textContent = "Atualizar";
            botaoAtualizar.className = 'btn table-btn';
            botaoAtualizar.onclick = function (event) {
                event.preventDefault(); // Prevenir a ação padrão de submissão do formulário
                carregarDadosParaEditar(linha);
            };
            celulaAcoes.appendChild(botaoAtualizar);

            celulaAcoes.style.textAlign = "center"; // Centralizar os botões na célula
            destacarCPFsInvalidos(); // Verificar CPFs da nova linha
        }



        function atualizarDados() {
            if (modoAdicionar) {
                var tabela = document.getElementById("tabela");
                var nome = document.getElementById("inputNome").value;
                var cpf = document.getElementById("inputCPF").value;
                var email = document.getElementById("inputEmail1").value;
                var tipoPessoa = document.getElementById("tipoPessoa").value;
                var texto = document.getElementById("textareaTexto").value;

                if (nome === "" || cpf === "" || email === "" || tipoPessoa === "" || texto === "") {
                    alert("Por favor, preencha todos os campos.");
                    return;
                }

                var novaLinha = tabela.insertRow(-1);
                var celulaNome = novaLinha.insertCell(0);
                var celulaCPF = novaLinha.insertCell(1);
                var celulaEmail = novaLinha.insertCell(2);
                var celulaTipoPessoa = novaLinha.insertCell(3);
                var celulaTexto = novaLinha.insertCell(4);

                celulaNome.textContent = nome;
                celulaCPF.textContent = cpf;
                celulaEmail.textContent = email;
                celulaTipoPessoa.textContent = tipoPessoa;
                celulaTexto.textContent = texto;

                adicionarBotoesLinha(novaLinha);
                limparCampos();
                destacarCPFsInvalidos();
            } else {
                var celulas = linhaEditavel.getElementsByTagName("td");
                celulas[0].textContent = document.getElementById("inputNome").value;
                celulas[1].textContent = document.getElementById("inputCPF").value;
                celulas[2].textContent = document.getElementById("inputEmail1").value;
                celulas[3].textContent = document.getElementById("tipoPessoa").value;
                celulas[4].textContent = document.getElementById("textareaTexto").value;
                alternarModo();
                limparCampos();
                destacarCPFsInvalidos();
            }
        }

        function excluirLinha(linha) {
            var index = linha.rowIndex;
            document.getElementById("tabela").deleteRow(index);
            destacarCPFsInvalidos();
        }

        function carregarDadosParaEditar(linha) {
            var celulas = linha.getElementsByTagName("td");
            document.getElementById("inputNome").value = celulas[0].textContent;
            document.getElementById("inputCPF").value = celulas[1].textContent;
            document.getElementById("inputEmail1").value = celulas[2].textContent;
            document.getElementById("tipoPessoa").value = celulas[3].textContent;
            document.getElementById("textareaTexto").value = celulas[4].textContent;

            linhaEditavel = linha;

            document.getElementById("botaoAcao").style.display = 'none';
            document.getElementById("confirmarAtualizacaoBtn").style.display = 'inline-block';
        }

        function alternarModo() {
            modoAdicionar = !modoAdicionar;
            var botaoAcao = document.getElementById("botaoAcao");
            botaoAcao.textContent = modoAdicionar ? "Adicionar Dados" : "Atualizar Dados";
        }

        function limparCampos() {
            document.getElementById("inputNome").value = "";
            document.getElementById("inputCPF").value = "";
            document.getElementById("inputEmail1").value = "";
            document.getElementById("tipoPessoa").value = "";
            document.getElementById("textareaTexto").value = "";
        }



        function importarExcel() {
            var input = document.getElementById('excelFile');
            if (!input.files || input.files.length === 0) {
                alert('Por favor, selecione um arquivo Excel.');
                return;
            }
            var file = input.files[0];
            var reader = new FileReader();

            reader.onload = function (e) {
                var data = new Uint8Array(e.target.result);
                var workbook = XLSX.read(data, { type: 'array' });
                var sheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[sheetName];

                var expectedColumns = ['NOME_PESSOA', 'CPF_PESSOA', 'EMAIL_PESSOA', 'TIPO_PESSOA', 'TEXTO'];
                var headerRow = XLSX.utils.sheet_to_json(worksheet, { header: 1, range: 'A1:E1' })[0];
                var isValidModel = expectedColumns.every(function (col, index) {
                    return headerRow[index] === col;
                });

                if (!isValidModel) {
                    alert('O modelo da planilha selecionada está incorreto.');
                    return;
                }

                var table = document.getElementById('tabela').getElementsByTagName('tbody')[0];
                var rows = XLSX.utils.sheet_to_json(worksheet, { header: 1, range: 1 });

                rows.forEach(function (row) {
                    if (row.every(cellContent => cellContent !== "")) {
                        var newRow = table.insertRow(-1);
                        var cellIndex = 0;

                        for (const key in row) {
                            if (row.hasOwnProperty(key)) {
                                var cell = newRow.insertCell(cellIndex++);
                                cell.textContent = row[key];
                            }
                        }

                        var celulaAcoes = newRow.insertCell(cellIndex); // Adicionar célula para ações
                        adicionarBotoesLinha(celulaAcoes, newRow); // Chamar a função para adicionar botões
                    }
                });

                destacarCPFsInvalidos(); // Verifica CPFs inválidos após adicionar novas linhas

                // Remover linhas em branco após importar os dados do Excel
                removerLinhasEmBranco();
            };
            reader.readAsArrayBuffer(file);
        }

        function removerLinhasEmBranco() {
            var tabela = document.getElementById("tabela").getElementsByTagName("tbody")[0];
            var linhas = tabela.getElementsByTagName("tr");

            // Usar loop reverso para evitar problemas com o índice ao remover linhas
            for (var i = linhas.length - 1; i >= 0; i--) {
                var celulas = linhas[i].getElementsByTagName("td");
                var linhaVazia = true;

                // Verificar se todas as células da linha estão vazias ou contêm apenas espaços
                for (var j = 0; j < celulas.length; j++) {
                    if (celulas[j].textContent.trim() !== "") {
                        linhaVazia = false;
                        break;
                    }
                }

                // Se a linha estiver vazia, remova-a
                if (linhaVazia) {
                    tabela.deleteRow(i);
                }
            }
        }





        function importarCertificado() {
            var input = document.getElementById('arteCertificadoFile');
            if (!input.files || input.files.length === 0) {
                alert('Por favor, selecione um arquivo de certificado.');
                return;
            }
            var file = input.files[0];
            document.getElementById('certificadoFileName').textContent = file.name; // Exibe o nome do arquivo
        }

        function cadastrarEvento() {
            var nomeEvento = document.getElementById('nomeEvento').value;
            if (nomeEvento.trim() === '') {
                alert('Por favor, insira o nome do evento.');
                return;
            }

            var tabelaEventos = document.getElementById('eventos-tbody');
            var novaLinha = tabelaEventos.insertRow(-1);

            var celulaCodigo = novaLinha.insertCell(0);
            celulaCodigo.textContent = eventos.length + 1;

            var celulaNome = novaLinha.insertCell(1);
            celulaNome.textContent = nomeEvento;

            var celulaImagem = novaLinha.insertCell(2);
            var imgCertificado = document.createElement('img');
            var certificadoFile = document.getElementById('arteCertificadoFile').files[0];
            if (certificadoFile) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    imgCertificado.src = e.target.result;
                    imgCertificado.style.width = '60px';
                    celulaImagem.appendChild(imgCertificado);
                };
                reader.readAsDataURL(certificadoFile);
            } else {
                imgCertificado.src = '';
                celulaImagem.appendChild(imgCertificado);
            }

            var celulaAcoes = novaLinha.insertCell(3);

            var botaoEmitir = document.createElement('button');
            botaoEmitir.textContent = 'Emitir certificado';
            botaoEmitir.className = 'btn btn-emitir'; // Classe para estilizar
            botaoEmitir.onclick = function () {
                emitirCertificado(nomeEvento);
            };
            celulaAcoes.appendChild(botaoEmitir);

            var botaoAtualizar = document.createElement('button');
            botaoAtualizar.textContent = 'Atualizar';
            botaoAtualizar.className = 'btn btn-atualizar'; // Classe para estilizar
            botaoAtualizar.onclick = function () {
                atualizarEvento(nomeEvento);
            };
            celulaAcoes.appendChild(botaoAtualizar);

            // Adiciona o novo evento à lista de eventos
            eventos.push({ id: eventos.length + 1, nome: nomeEvento, data: new Date().toLocaleDateString(), imagem: imgCertificado.src });

            // Envia os dados do evento para o backend
            enviarDadosEvento();
        }

        function enviarDadosEvento() {
            var nomeEvento = document.getElementById('nomeEvento').value;
            var arquivoCertificado = document.getElementById('arteCertificadoFile').files[0];
            var tabela = document.getElementById('tabela');
            var dadosTabela = [];
            var linhas = tabela.getElementsByTagName('tr');

            for (var i = 1; i < linhas.length; i++) {
                var linha = linhas[i];
                var celulas = linha.getElementsByTagName('td');
                var dadosLinha = [];

                for (var j = 0; j < celulas.length - 1; j++) {
                    dadosLinha.push(celulas[j].textContent);
                }

                dadosTabela.push(dadosLinha);
            }

            var formData = new FormData();
            formData.append('Nome', nomeEvento);
            formData.append('ImagemCertificado', arquivoCertificado);

            // Transformar dadosTabela em JSON e adicionar ao FormData como um campo string
            formData.append('DadosTabela', JSON.stringify(dadosTabela));

            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/Home_Organizador/NovoEvento');
            xhr.setRequestHeader('RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
            xhr.onload = function () {
                if (xhr.status === 200) {
                    alert('Evento cadastrado com sucesso!');
                    window.location.href = '/Home_Organizador/Index';
                } else {
                    alert('Erro ao cadastrar o evento. Por favor, tente novamente.');
                }
            };
            xhr.send(formData);
        }

        function filtrarEventos() {
            var input = document.getElementById('campo-pesquisa');
            var filter = input.value.toUpperCase();
            var tabelaEventos = document.querySelector('.tabela-eventos tbody');
            var tr = tabelaEventos.getElementsByTagName("tr");

            console.log('Filtro:', filter); // Verificar o valor do filtro
            console.log('Número de linhas:', tr.length); // Verificar o número de linhas na tabela

            for (var i = 0; i < tr.length; i++) {
                var td = tr[i].getElementsByTagName("td")[1]; // Index 1 é a coluna do Nome do Evento
                console.log('Linha:', i, 'Coluna:', td); // Verificar a célula atual

                if (td) {
                    var txtValue = td.textContent || td.innerText;
                    console.log('Texto da célula:', txtValue); // Verificar o texto da célula

                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            }
        }

        function destacarDuplicatas() {
            const tabela = document.getElementById("tabela").getElementsByTagName("tbody")[0];
            const linhas = tabela.getElementsByTagName("tr");
            let valoresVistos = {
                nome: {},
                cpf: {},
                email: {},
                texto: {}
            };

            Array.from(linhas).forEach((linha, linhaIndex) => {
                ["nome", "cpf", "email", "texto"].forEach((campo, index) => {
                    const valor = linha.cells[index].textContent.trim();
                    console.log(`Processando: ${campo}, Valor: ${valor}, Linha: ${linhaIndex}`); // Debugar valor e linha
                    if (valoresVistos[campo][valor]) {
                        valoresVistos[campo][valor].push(linha.cells[index]);
                    } else {
                        valoresVistos[campo][valor] = [linha.cells[index]];
                    }
                });
            });

            Object.keys(valoresVistos).forEach(campo => {
                console.log(`Duplicatas em ${campo}:`, valoresVistos[campo]); // Mostrar estrutura de duplicatas
                Object.keys(valoresVistos[campo]).forEach(valor => {
                    if (valoresVistos[campo][valor].length > 1) {
                        valoresVistos[campo][valor].forEach(celula => {
                            celula.classList.add('duplicado');
                        });
                    }
                });
            });
        }


        function confirmarAtualizacao() {
            if (!linhaEditavel) return;

            var nome = document.getElementById("inputNome").value.trim();
            var cpf = document.getElementById("inputCPF").value.trim();
            var email = document.getElementById("inputEmail1").value.trim();
            var tipoPessoa = document.getElementById("tipoPessoa").value.trim();
            var texto = document.getElementById("textareaTexto").value.trim();

            if (nome === "" || cpf === "" || email === "" || tipoPessoa === "" || texto === "") {
                alert("Por favor, preencha todos os campos.");
                return;
            }

            var celulas = linhaEditavel.getElementsByTagName("td");
            celulas[0].textContent = nome;
            celulas[1].textContent = cpf;
            celulas[2].textContent = email;
            celulas[3].textContent = tipoPessoa;
            celulas[4].textContent = texto;

            linhaEditavel = null;

            document.getElementById("botaoAcao").style.display = 'inline-block';
            document.getElementById("confirmarAtualizacaoBtn").style.display = 'none';
            limparCampos();
            destacarCPFsInvalidos();
        }
        function destacarCPFsInvalidos() {
            var tabela = document.getElementById("tabela");
            var linhas = tabela.getElementsByTagName("tr");
            var temCPFInvalido = false; // Variável para rastrear CPFs inválidos

            for (var i = 1; i < linhas.length; i++) { // Começa do índice 1 para pular o cabeçalho
                var celulaCPF = linhas[i].getElementsByTagName("td")[1]; // Assume que CPF está na segunda coluna
                if (celulaCPF) {
                    if (!validarCPF(celulaCPF.textContent.trim())) {
                        celulaCPF.style.backgroundColor = 'red'; // Pinta de vermelho se o CPF for inválido
                        temCPFInvalido = true; // Marca como inválido
                    } else {
                        celulaCPF.style.backgroundColor = ''; // Remove a cor de fundo se o CPF for válido
                    }
                }
            }
            return !temCPFInvalido; // Retorna falso se houver CPFs inválidos
        }



        function validarCPF(cpf) {
            cpf = cpf.replace(/[^\d]+/g, '');
            if (cpf.length !== 11 || /^(\d)\1*$/.test(cpf)) {
                return false;
            }

            let soma = 0;
            let resto;
            for (let i = 1; i <= 9; i++) {
                soma += parseInt(cpf.substring(i - 1, i)) * (11 - i);
            }
            resto = (soma * 10) % 11;
            if ((resto === 10) || (resto === 11)) resto = 0;
            if (resto !== parseInt(cpf.substring(9, 10))) return false;

            soma = 0;
            for (let i = 1; i <= 10; i++) {
                soma += parseInt(cpf.substring(i - 1, i)) * (12 - i);
            }
            resto = (soma * 10) % 11;
            if ((resto === 10) || (resto === 11)) resto = 0;
            return resto === parseInt(cpf.substring(10, 11));
        }


        document.getElementById('arteCertificadoFile').addEventListener('change', function () {
            var fileInput = document.getElementById('arteCertificadoFile');
            var certificadoFileName = document.getElementById('certificadoFileName');
            if (fileInput.files.length > 0) {
                certificadoFileName.textContent = fileInput.files[0].name;
            } else {
                certificadoFileName.textContent = '';
            }
        });

        document.addEventListener('click', function (event) {
            var isClickInsideDropdown = event.target.closest('.acoes-dropdown-content') || event.target.closest('.acoes-btn');
            if (!isClickInsideDropdown) {
                closeAllDropdowns();
            }
        });

        function toggleDropdown(button) {
            var dropdownContent = button.nextElementSibling;
            var isOpen = dropdownContent.style.display === 'block';

            closeAllDropdowns();

            if (!isOpen) {
                dropdownContent.style.display = 'block';
            }
        }

        function closeAllDropdowns() {
            var dropdowns = document.querySelectorAll('.acoes-dropdown-content');
            dropdowns.forEach(function (dropdown) {
                dropdown.style.display = 'none';
            });
        }

        // Adicionando evento aos botões do dropdown
        document.addEventListener('click', function (event) {
            if (event.target.matches('.acoes-dropdown-content button')) {
                closeAllDropdowns();
            }
        });

        // Atualizando a função para processar a resposta da busca de pessoas
        function buscarPessoas() {
            var termo = $("#searchInput").val();
            if (termo.length >= 3) { // Buscar apenas se o nome tiver 3 ou mais caracteres
                $.ajax({
                    url: 'Pessoa/BuscarPessoas',
                    type: 'GET',
                    data: { termo: termo },
                    success: function (data) {
                        var resultList = $("#resultList");
                        resultList.find(".result-item, .detalhes").remove(); // Limpar resultados anteriores

                        data.forEach(function (pessoa) {
                            var detalhesInline = "<span class='detalhes-inline'> " +
                                pessoa.cpf + " &#x2714; " + pessoa.email + "</span>";
                            var item = $("<div class='result-item'></div>")
                                .append("<span class='col-id'>" + pessoa.id + "</span>")
                                .append("<span class='col-nome'>" + pessoa.nome + detalhesInline + "</span>")
                                .append(
                                    $("<div class='acoes-dropdown'>")
                                        .append("<button class='acoes-btn' onclick='toggleDropdown(this)'>Ações</button>")
                                        .append(
                                            $("<div class='acoes-dropdown-content'>")
                                                .append("<button onclick='exibirCertificado(this)'>Exibir Certificado</button>")
                                                .append("<button onclick='acao2()'>Reenviar Instruções</button>")
                                                .append("<button onclick='acao3()'>Atualizar</button>")
                                        )
                                )
                                .data("id", pessoa.id)
                                .data("cpf", pessoa.cpf)
                                .data("email", pessoa.email)
                                .data("certificado", pessoa.certificado);

                            var certificado = pessoa.certificado ? pessoa.certificado : "undefined";
                            var certificadoDiv = $("<div class='certificado'></div>")
                                .append("<a class='certificado-link' href='#' onclick='abrirCertificado(\"" + pessoa.certificado + "\")'>" + certificado + "</a>");

                            resultList.append(item).append(certificadoDiv);
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error("Erro ao buscar pessoas:", error);
                        alert("Erro ao buscar pessoas. Consulte o console para mais detalhes.");
                    }
                });
            }
        }


        function toggleDropdown(button) {
            $(button).next(".acoes-dropdown-content").toggle();
        }

        function exibirCertificado(button) {
            var item = $(button).closest('.result-item');
            item.next(".certificado").slideToggle("slow"); // Aplica o efeito de deslizamento lento
        }

        function abrirCertificado(certificadoUrl) {
            if (certificadoUrl && certificadoUrl !== "undefined") {
                window.open(certificadoUrl, '_blank');
            } else {
                alert("Certificado não disponível");
            }
        }

        function acao2() {
            alert("Ação 2 executada");
        }

        function acao3() {
            alert("Ação 3 executada");
        }

        function exibirDetalhes(id, nome, cpf, email) {
            var details = $("#details");
            details.empty(); // Limpar detalhes anteriores

            details.append("<p>ID: " + id + "</p>");
            details.append("<p>Nome: " + nome + "</p>");
            details.append("<p>CPF: " + cpf + "</p>");
            details.append("<p>Email: " + email + "</p>");
        }

        document.getElementById('arteCertificadoFile').addEventListener('change', function () {
            var fileInput = document.getElementById('arteCertificadoFile');
            var novoInputText = document.getElementById('novoInputText');
            if (fileInput.files.length > 0) {
                novoInputText.value = fileInput.files[0].name;
            } else {
                novoInputText.value = '';
            }
        });

        function processarDadosTabela(event) {
            var tableData = [];
            var rows = document.querySelectorAll('#tabela tbody tr');

            rows.forEach(row => {
                var cells = row.querySelectorAll('td');
                var rowData = {
                    nome: cells[0].textContent.trim(),
                    cpf: cells[1].textContent.trim(),
                    email: cells[2].textContent.trim(),
                    tipoPessoa: cells[3].textContent.trim(),
                    texto: cells[4].textContent.trim()
                };
                if (rowData.nome && rowData.cpf && rowData.email && rowData.tipoPessoa && rowData.texto) { // Verificar se todos os campos estão preenchidos
                    tableData.push(rowData);
                }
            });

            document.getElementById('tableData').value = JSON.stringify(tableData);
            return true; // Permitir a submissão do formulário
        }




        function abrirCardEmitirCertificado(eventoId) {
            // Configurar o formulário oculto com o evento ID
            document.getElementById('eventoId').value = eventoId;

            // Mostrar o card "Emitir Certificado"
            const cardEmitirCertificado = document.getElementById('card-emitir-certificado');
            cardEmitirCertificado.style.display = 'block';

            // Chamar função para buscar e preencher certificados
            buscarEPreencherCertificados(eventoId);
        }

        function buscarEPreencherCertificados(eventoId) {
            document.getElementById('eventoId').value = eventoId;
            const form = document.getElementById('formEmitirCertificado');
            const formData = new FormData(form);

            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data) {
                        preencherTabelaCertificados(data);
                        // Abrir automaticamente o card "Emitir Certificado"
                        document.getElementById('card-emitir-certificado').style.display = 'block';
                        // Preencher os detalhes do evento
                        document.getElementById('nomeDoEvento').value = data.nome;
                        document.getElementById('imagemCertificado').src = `/Home_Organizador/VisualizarImagem/${data.id}`;
                    } else {
                        alert('Evento não encontrado.');
                    }
                })
                .catch(error => {
                    console.error('Erro ao obter os dados do evento:', error);
                });
        }



        function preencherTabelaCertificados(evento) {
            console.log('Dados do evento recebidos:', evento);

            const tbody = document.getElementById('certificados-tbody');
            tbody.innerHTML = ''; // Limpar a tabela antes de preencher

            if (evento && evento.pessoasEventos) {
                evento.pessoasEventos.forEach(pessoa => {
                    const tr = document.createElement('tr');

                    // Código
                    const tdCodigo = document.createElement('td');
                    tdCodigo.style.textAlign = 'center';
                    tdCodigo.textContent = pessoa.id; // Supondo que cada pessoa tenha um ID
                    tr.appendChild(tdCodigo);

                    // Nome
                    const tdNome = document.createElement('td');
                    tdNome.style.textAlign = 'center';
                    tdNome.textContent = pessoa.nome;
                    tr.appendChild(tdNome);

                    // Certificado Emitido
                    const tdCertificado = document.createElement('td');
                    tdCertificado.style.textAlign = 'center';
                    if (pessoa.certificadoEmitido) {
                        tdCertificado.innerHTML = '&#10004;'; // Marca de seleção (✔)
                    }
                    tr.appendChild(tdCertificado);

                    // Retorno Email
                    const tdEmail = document.createElement('td');
                    tdEmail.style.textAlign = 'center';
                    tdEmail.textContent = pessoa.mensagemRetornoEmail;
                    tr.appendChild(tdEmail);

                    // Checkbox "Selecionar"
                    const tdCheckbox = document.createElement('td');
                    tdCheckbox.style.textAlign = 'center';

                    // Verifica se o certificado já foi emitido
                    if (!pessoa.certificadoEmitido) {
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.dataset.id = pessoa.id; // Adiciona o ID da pessoa ao checkbox
                        tdCheckbox.appendChild(checkbox);
                    }

                    tr.appendChild(tdCheckbox);
                    tbody.appendChild(tr);
                });
            } else {
                console.error('Dados do evento ou pessoas não estão definidos corretamente.');
            }
        }







        //APONTA NO CONSOLE O RETORNO DO JSON DA CONTROLLER

        // function preencherTabelaCertificados(evento) {
        //     console.log('Dados do evento recebidos:', evento);

        //     const tbody = document.getElementById('certificados-tbody');
        //     tbody.innerHTML = ''; // Limpar a tabela antes de preencher

        //     if (evento && evento.pessoas) {
        //         evento.pessoas.forEach(pessoa => {
        //             const tr = document.createElement('tr');

        //             // Código
        //             const tdCodigo = document.createElement('td');
        //             tdCodigo.style.textAlign = 'center';
        //             tdCodigo.textContent = pessoa.id; // Supondo que cada pessoa tenha um ID
        //             tr.appendChild(tdCodigo);

        //             // Nome
        //             const tdNome = document.createElement('td');
        //             tdNome.style.textAlign = 'center';
        //             tdNome.textContent = pessoa.nome;
        //             tr.appendChild(tdNome);

        //             // Email
        //             const tdEmail = document.createElement('td');
        //             tdEmail.style.textAlign = 'center';
        //             tdEmail.textContent = pessoa.email;
        //             tr.appendChild(tdEmail);

        //             // Checkbox "Todos"
        //             const tdCheckbox = document.createElement('td');
        //             tdCheckbox.style.textAlign = 'center';
        //             const checkbox = document.createElement('input');
        //             checkbox.type = 'checkbox';
        //             tdCheckbox.appendChild(checkbox);
        //             tr.appendChild(tdCheckbox);

        //             tbody.appendChild(tr);
        //         });
        //     } else {
        //         console.error('Dados do evento ou pessoas não estão definidos corretamente.');
        //     }
        // }

    

        let allSelected = false;

        function toggleSelectAll() {
            const checkboxes = document.querySelectorAll('#certificados-tbody input[type="checkbox"]');
            const anyUnchecked = Array.from(checkboxes).some(checkbox => !checkbox.checked);

            checkboxes.forEach(checkbox => {
                checkbox.checked = anyUnchecked;
            });
        }



        function permitirApenasNumeros(input) {
            input.value = input.value.replace(/\D/g, '');
        }

  
        document.getElementById('emitirCertificado').addEventListener('click', function () {
            const eventoId = document.getElementById('eventoId').value;
            const checkboxes = document.querySelectorAll('#certificados-tbody input[type="checkbox"]:checked');
            const idPessoas = Array.from(checkboxes).map(checkbox => checkbox.dataset.id);

            if (idPessoas.length === 0) {
                alert('Por favor, selecione pelo menos uma pessoa.');
                return;
            }

            const formData = new FormData();
            formData.append('id', eventoId);
            idPessoas.forEach(id => formData.append('idPessoas', id));

            fetch('/Home_Organizador/EmitirCertificado', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(error => { throw new Error(error.message || 'Erro desconhecido'); });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert('Ação efetuada com sucesso!');
                    } else {
                        alert('Falha ao emitir certificados: ' + (data.message || 'Erro desconhecido'));
                    }
                })
                .catch(error => {
                    console.error('Erro ao emitir certificados:', error);
                    alert('Erro ao emitir certificados: ' + error.message);
                });
        });








        document.addEventListener('DOMContentLoaded', function () {
            // Função para carregar dados salvos no local storage
            function carregarConfiguracoes() {
                var configuracoes = JSON.parse(localStorage.getItem('configuracoes')) || {};

                document.getElementById('configuracoesEmail').value = configuracoes.email || '';
                document.getElementById('configuracoesSenha').value = configuracoes.senha || '';
                document.getElementById('configuracoesServidorSMTP').value = configuracoes.servidor_smtp || '';
                document.getElementById('configuracoesPorta').value = configuracoes.porta || '';
                document.getElementById('configuracoesSSL').checked = configuracoes.ssl || false;
            }

            // Função para salvar dados no local storage
            function salvarConfiguracoes() {
                var configuracoes = {
                    email: document.getElementById('configuracoesEmail').value,
                    senha: document.getElementById('configuracoesSenha').value,
                    servidor_smtp: document.getElementById('configuracoesServidorSMTP').value,
                    porta: document.getElementById('configuracoesPorta').value,
                    ssl: document.getElementById('configuracoesSSL').checked
                };

                localStorage.setItem('configuracoes', JSON.stringify(configuracoes));
            }

            // Função para permitir edição dos campos
            function editarRemetente() {
                var configuracoesInfo = document.querySelector('.configuracoes-info');
                configuracoesInfo.classList.add('editable');

                document.getElementById('configuracoesEmail').readOnly = false;
                document.getElementById('configuracoesSenha').readOnly = false;
                document.getElementById('configuracoesServidorSMTP').readOnly = false;
                document.getElementById('configuracoesPorta').readOnly = false;
                document.getElementById('configuracoesSSL').disabled = false;

                document.getElementById('editarRemetente').style.display = 'none';
                document.getElementById('salvarRemetente').style.display = 'inline-block';
            }

            // Função para salvar os campos editados
            function salvarRemetente() {
                salvarConfiguracoes();

                var configuracoesInfo = document.querySelector('.configuracoes-info');
                configuracoesInfo.classList.remove('editable');

                document.getElementById('configuracoesEmail').readOnly = true;
                document.getElementById('configuracoesSenha').readOnly = true;
                document.getElementById('configuracoesServidorSMTP').readOnly = true;
                document.getElementById('configuracoesPorta').readOnly = true;
                document.getElementById('configuracoesSSL').disabled = true;

                document.getElementById('editarRemetente').style.display = 'inline-block';
                document.getElementById('salvarRemetente').style.display = 'none';
            }

            // Event listeners
            document.getElementById('editarRemetente').addEventListener('click', editarRemetente);
            document.getElementById('salvarRemetente').addEventListener('click', salvarRemetente);

            // Chamar a função para carregar as configurações quando a página carregar
            carregarConfiguracoes();
        });






        document.getElementById('assinaturaDigitalInput').addEventListener('change', function (event) {
            var input = event.target;
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    var preview = document.getElementById('assinaturaDigitalPreview');
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(input.files[0]);
            }
        });



            //ADICIONAR PESSOAS------------------------------------------

            // Função para adicionar uma nova linha na tabela com os dados dos inputs
            function adicionarDados() {
                const nome = document.getElementById('inputNomeAtualizar').value;
                const cpf = document.getElementById('inputCPFAtualizar').value;
                const email = document.getElementById('inputEmail1Atualizar').value;
                const texto = document.getElementById('inputTextoAtualizar').value;

                if (!nome || !cpf || !email || !texto) {
                    alert("Adicionada com sucesso.");
                    return;
                }

                if (!validarCPF(cpf)) {
                    alert("CPF inválido. Por favor, insira um CPF válido.");
                    return;
                }

                const tbody = document.getElementById('eventos-tbody-atualizar');
                const row = document.createElement('tr');

                // Nome
                const tdNome = document.createElement('td');
                tdNome.textContent = nome;
                row.appendChild(tdNome);

                // CPF
                const tdCPF = document.createElement('td');
                tdCPF.textContent = cpf;
                row.appendChild(tdCPF);

                // Email
                const tdEmail = document.createElement('td');
                tdEmail.textContent = email;
                row.appendChild(tdEmail);

                // Texto
                const tdTexto = document.createElement('td');
                tdTexto.textContent = texto;
                row.appendChild(tdTexto);

                // Ações
                const tdAcoes = document.createElement('td');

                // Botão Excluir
                const botaoExcluir = document.createElement("button");
                botaoExcluir.textContent = "Excluir";
                botaoExcluir.className = 'btn table-btn';
                botaoExcluir.onclick = function (event) {
                    event.preventDefault(); // Prevenir a ação padrão de submissão do formulário
                    if (confirm("Tem certeza de que deseja excluir esta pessoa?")) {
                        // Obter a linha a ser excluída
                        const linha = event.target.closest('tr');
                        // Remover a linha da tabela
                        linha.remove();
                    }
                };
                tdAcoes.appendChild(botaoExcluir);

                // Botão Atualizar
                const botaoAtualizar = document.createElement("button");
                botaoAtualizar.textContent = "Atualizar";
                botaoAtualizar.className = 'btn table-btn';
                botaoAtualizar.onclick = function (event) {
                    event.preventDefault(); // Prevenir a ação padrão de submissão do formulário

                    // Obter a linha a ser editada
                    const linha = event.target.closest('tr');

                    // Obter os elementos de TD dentro da linha
                    const tds = linha.querySelectorAll('td');

                    // Extrair os valores atuais da pessoa da linha
                    const nomeAtual = tds[0].textContent;
                    const cpfAtual = tds[1].textContent;
                    const emailAtual = tds[2].textContent;
                    const textoAtual = tds[3].textContent;

                    // Transferir dados para os campos de edição
                    document.getElementById('inputNomeAtualizar').value = nomeAtual;
                    document.getElementById('inputCPFAtualizar').value = cpfAtual;
                    document.getElementById('inputEmail1Atualizar').value = emailAtual;
                    document.getElementById('inputTextoAtualizar').value = textoAtual;

                    // Adicionar o ID da pessoa ao botão de confirmação para referência
                    document.getElementById('botaoConfirmarAtualizacao').setAttribute('data-pessoa-id', pessoa.id);

                    // Mostrar o botão de confirmação
                    document.getElementById('botaoConfirmarAtualizacao').style.display = 'inline-block';

                    // Ocultar o botão de atualização e exclusão
                    tdAcoes.innerHTML = '';

                    // Adicionar botão Confirmar Atualização
                    const botaoConfirmar = document.createElement("button");
                    botaoConfirmar.textContent = "Confirmar";
                    botaoConfirmar.className = 'btn table-btn';
                    botaoConfirmar.onclick = function (event) {
                        event.preventDefault(); // Prevenir a ação padrão de submissão do formulário

                        // Obter os novos valores dos inputs
                        const nomeNovo = document.getElementById('inputNomeAtualizar').value;
                        const cpfNovo = document.getElementById('inputCPFAtualizar').value;
                        const emailNovo = document.getElementById('inputEmail1Atualizar').value;
                        const textoNovo = document.getElementById('inputTextoAtualizar').value;

                        // Atualizar os valores na linha da tabela
                        tds[0].textContent = nomeNovo;
                        tds[1].textContent = cpfNovo;
                        tds[2].textContent = emailNovo;
                        tds[3].textContent = textoNovo;

                        // Limpar os campos de edição
                        limparCamposAtualizacao();

                        // Exibir novamente o botão Atualizar e Excluir
                        tdAcoes.innerHTML = ''; // Limpa ações atuais
                        tdAcoes.appendChild(botaoAtualizar);
                        tdAcoes.appendChild(botaoExcluir); // Adicionar botão excluir de volta
                    };

                    // Adicionar o botão Confirmar na célula de Ações
                    tdAcoes.appendChild(botaoConfirmar);
                };


                tdAcoes.appendChild(botaoAtualizar);
                row.appendChild(tdAcoes);
                tbody.appendChild(row);

                // Limpar os campos de edição
                limparCamposAtualizacao();
            }

            // Função para limpar os campos de atualização
            function limparCamposAtualizacao() {
                document.getElementById('inputNomeAtualizar').value = '';
                document.getElementById('inputCPFAtualizar').value = '';
                document.getElementById('inputEmail1Atualizar').value = '';
                document.getElementById('inputTextoAtualizar').value = '';
            }

            // Adiciona um evento ao botão "Adicionar Dados" para chamar a função adicionarDados
            document.getElementById('botaoAcaoAtualizar').addEventListener('click', adicionarDados);

            // Função para atualizar os detalhes do evento e preencher a tabela
            async function atualizarEvento(eventoId, eventoNome) {
                if (!eventoId) {
                    console.error('Evento ID não definido.');
                    return;
                }

                try {
                    // Preencher os campos de ID e Nome do Evento
                    document.getElementById('idEventoAtualizar').value = eventoId;
                    document.getElementById('idEventoAtualizar').readOnly = true;

                    document.getElementById('nomeEventoAtualizar').value = eventoNome;
                    document.getElementById('nomeEventoAtualizar').readOnly = true;

                    const response = await fetch(`/Home_Organizador/ObterPessoasEvento?id=${eventoId}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }

                    const eventoPessoas = await response.json();
                    console.log('Dados do evento recebidos:', eventoPessoas); // Log para depuração

                    preencherTabela(eventoPessoas);

                    // Exibir o card "card-atualizar-evento"
                    document.getElementById('card-atualizar-evento').style.display = 'block';
                } catch (error) {
                    console.error('Erro ao obter detalhes do evento e pessoas:', error);
                }
            }

            function preencherTabela(eventoPessoas) {
                const tbody = document.getElementById('eventos-tbody-atualizar');
                tbody.innerHTML = ''; // Limpa o conteúdo atual do tbody

                if (eventoPessoas && eventoPessoas.pessoasEventos && eventoPessoas.pessoasEventos.length > 0) {
                    eventoPessoas.pessoasEventos.forEach(pessoa => {
                        const row = document.createElement('tr');

                        // Nome
                        const tdNome = document.createElement('td');
                        tdNome.textContent = pessoa.nome; // Exibir o nome da pessoa
                        row.appendChild(tdNome);

                        // CPF
                        const tdCPF = document.createElement('td');
                        tdCPF.textContent = pessoa.cpf; // Exibir o CPF da pessoa
                        row.appendChild(tdCPF);

                        // Email
                        const tdEmail = document.createElement('td');
                        tdEmail.textContent = pessoa.email; // Exibir o email da pessoa
                        row.appendChild(tdEmail);

                        // Texto
                        const tdTexto = document.createElement('td');
                        tdTexto.textContent = pessoa.texto; // Exibir o texto da pessoa
                        row.appendChild(tdTexto);

                        // Ações
                        const tdAcoes = document.createElement('td');

                        if (pessoa.dataEmissao === null) {
                            // Botão Excluir
                            const botaoExcluir = document.createElement("button");
                            botaoExcluir.textContent = "Excluir";
                            botaoExcluir.className = 'btn table-btn';
                            botaoExcluir.onclick = function (event) {
                                event.preventDefault(); // Prevenir a ação padrão de submissão do formulário

                                if (confirm("Tem certeza de que deseja excluir esta pessoa?")) {
                                    // Obter a linha a ser excluída
                                    const linha = event.target.closest('tr');

                                    // Remover a linha da tabela
                                    linha.remove();

                                    // Aqui coloca a função para excluir a pessoa do backend
                                    // excluirPessoa(pessoa.id);
                                }
                            };
                            tdAcoes.appendChild(botaoExcluir);

                            // Botão Atualizar
                            const botaoAtualizar = document.createElement("button");
                            botaoAtualizar.textContent = "Atualizar";
                            botaoAtualizar.className = 'btn table-btn';
                            botaoAtualizar.onclick = function (event) {
                                event.preventDefault(); // Prevenir a ação padrão de submissão do formulário

                                // Transferir dados para os campos de edição
                                document.getElementById('inputNomeAtualizar').value = pessoa.nome;
                                document.getElementById('inputCPFAtualizar').value = pessoa.cpf;
                                document.getElementById('inputEmail1Atualizar').value = pessoa.email;
                                document.getElementById('inputTextoAtualizar').value = pessoa.texto;

                                // Adiciona o ID da pessoa ao botão de confirmação para referência
                                document.getElementById('botaoConfirmarAtualizacao').setAttribute('data-pessoa-id', pessoa.id);

                                // Mostrar o botão de confirmação
                                document.getElementById('botaoConfirmarAtualizacao').style.display = 'inline-block';
                            };

                            tdAcoes.appendChild(botaoAtualizar);
                        } else {
                            // Indicar que a pessoa não pode ser atualizada ou excluída
                            tdAcoes.textContent = 'Não pode ser editado ou excluído';
                        }

                        row.appendChild(tdAcoes);
                        tbody.appendChild(row);
                    });
                } else {
                    const row = document.createElement('tr');
                    const tdAcoes = document.createElement('td');
                    tdAcoes.colSpan = 5; // Ajuste conforme o número de colunas na tabela
                    tdAcoes.textContent = 'Nenhum participante encontrado.';
                    row.appendChild(tdAcoes);
                    tbody.appendChild(row);
                }
            }


        // //DANDO CONFLITO COM O CRIAR EVENTOS------------------------------------------------------------------------------------------

            // // Função para confirmar a atualização
            // function confirmarAtualizacao() {
            //     const pessoaId = document.getElementById('botaoConfirmarAtualizacao').getAttribute('data-pessoa-id');
            //     const nomeNovo = document.getElementById('inputNomeAtualizar').value;
            //     const cpfNovo = document.getElementById('inputCPFAtualizar').value;
            //     const emailNovo = document.getElementById('inputEmail1Atualizar').value;
            //     const textoNovo = document.getElementById('inputTextoAtualizar').value;

            //     // Lógica para atualizar os dados da pessoa no backend com base no ID (pessoaId)

            //     // Esconder o botão de confirmação após a atualização
            //     document.getElementById('botaoConfirmarAtualizacao').style.display = 'none';

            //     // Atualizar a linha na tabela correspondente à pessoa
            //     const linhas = document.querySelectorAll('#eventos-tbody-atualizar tr');
            //     linhas.forEach(linha => {
            //         const tds = linha.querySelectorAll('td');
            //         if (tds[1].textContent === cpfNovo) { // Comparar com o CPF para encontrar a linha correta
            //             tds[0].textContent = nomeNovo;
            //             tds[2].textContent = emailNovo;
            //             tds[3].textContent = textoNovo;
            //         }
            //     });

            //     // Limpar os campos de edição
            //     limparCamposAtualizacao();
            // }

            // Adiciona um evento ao botão de confirmação para chamar a função confirmarAtualizacao
            document.getElementById('botaoConfirmarAtualizacao').addEventListener('click', confirmarAtualizacao);

            // Função para limpar os campos de atualização
            function limparCamposAtualizacao() {
                document.getElementById('inputNomeAtualizar').value = '';
                document.getElementById('inputCPFAtualizar').value = '';
                document.getElementById('inputEmail1Atualizar').value = '';
                document.getElementById('inputTextoAtualizar').value = '';
            }

            // Adiciona um evento ao botão "Adicionar Dados" para chamar a função adicionarDados
            document.getElementById('botaoAcaoAtualizar').addEventListener('click', adicionarDados);

            function validarCPF(cpf) {
                cpf = cpf.replace(/[^\d]+/g, '');
                if (cpf.length !== 11) return false;

                let soma;
                let resto;
                soma = 0;
                if (cpf == "00000000000" || cpf == "11111111111" || cpf == "22222222222" || cpf == "33333333333" ||
                    cpf == "44444444444" || cpf == "55555555555" || cpf == "66666666666" || cpf == "77777777777" ||
                    cpf == "88888888888" || cpf == "99999999999")
                    return false;

                for (let i = 1; i <= 9; i++) soma = soma + parseInt(cpf.substring(i - 1, i)) * (11 - i);
                resto = (soma * 10) % 11;

                if ((resto == 10) || (resto == 11)) resto = 0;
                if (resto != parseInt(cpf.substring(9, 10))) return false;

                soma = 0;
                for (let i = 1; i <= 10; i++) soma = soma + parseInt(cpf.substring(i - 1, i)) * (12 - i);
                resto = (soma * 10) % 11;

                if ((resto == 10) || (resto == 11)) resto = 0;
                if (resto != parseInt(cpf.substring(10, 11))) return false;
                return true;
            }

            function permitirSomenteNumeros(event) {
                const charCode = event.which ? event.which : event.keyCode;
                if (charCode < 48 || charCode > 57) {
                    event.preventDefault();
                }
            }

            document.getElementById('inputCPFAtualizar').addEventListener('keypress', permitirSomenteNumeros);


            document.getElementById('AtualizarEvento').addEventListener('click', async function (event) {
                event.preventDefault(); // Prevenir o comportamento padrão do botão

                const tabela = document.querySelector('.tabela-container2 tbody');
                const linhas = tabela.querySelectorAll('tr');
                const dadosTabela = [];

                linhas.forEach(linha => {
                    const colunas = linha.querySelectorAll('td');
                    const pessoa = {
                        nome: colunas[0].textContent,
                        cpf: colunas[1].textContent,
                        email: colunas[2].textContent,
                        texto: colunas[3].textContent
                    };
                    dadosTabela.push(pessoa);
                });

                const idEvento = document.getElementById('idEventoAtualizar').value;

                if (!idEvento || idEvento <= 0) {
                    alert('ID do evento inválido.');
                    return;
                }

                if (dadosTabela.length === 0) {
                    alert('Nenhum dado na tabela para enviar.');
                    return;
                }

                try {
                    const response = await fetch('/Home_Organizador/AdicionarPessoas', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: new URLSearchParams({
                            id: idEvento, // Certifique-se de que o ID é enviado como string
                            tableData: JSON.stringify(dadosTabela)
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }

                    const result = await response.json();
                    if (result.success) {
                        alert('Dados enviados com sucesso.');
                        // Aqui você pode adicionar qualquer ação que queira realizar após o sucesso do envio
                    } else {
                        alert('Erro ao enviar os dados: ' + result.message);
                    }
                } catch (error) {
                    console.error('Erro ao enviar os dados:', error);
                    alert('Erro ao enviar os dados: ' + error.message);
                }
            });


            document.addEventListener("DOMContentLoaded", function () {
                const sairLink = document.getElementById("sair-link");

                sairLink.addEventListener("click", function (event) {
                    event.preventDefault(); // Evita o comportamento padrão do link

                    fetch('/Login/Sair', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                        .then(response => {
                            if (response.redirected) {
                                window.location.href = response.url;
                            }
                        })
                        .catch(error => {
                            console.error('Erro ao sair:', error);
                        });
                });
            });


            
            //FUNÇÃO PARA IMPORTAR PLANILHA

            function importarExcelAtualizar() {
                var input = document.getElementById('excelFileAtualizar');
                if (!input.files || input.files.length === 0) {
                    alert('Por favor, selecione um arquivo Excel.');
                    return;
                }
                var file = input.files[0];
                var reader = new FileReader();

                reader.onload = function (e) {
                    var data = new Uint8Array(e.target.result);
                    var workbook = XLSX.read(data, { type: 'array' });
                    var sheetName = workbook.SheetNames[0];
                    var worksheet = workbook.Sheets[sheetName];

                    var expectedColumns = ['NOME_PESSOA', 'CPF_PESSOA', 'EMAIL_PESSOA', 'TEXTO'];
                    var headerRow = XLSX.utils.sheet_to_json(worksheet, { header: 1, range: 'A1:D1' })[0];
                    var isValidModel = expectedColumns.every(function (col, index) {
                        return headerRow[index] === col;
                    });

                    if (!isValidModel) {
                        alert('O modelo da planilha selecionada está incorreto.');
                        return;
                    }

                    var table = document.getElementById('tabelaAtualizar').getElementsByTagName('tbody')[0];
                    var rows = XLSX.utils.sheet_to_json(worksheet, { header: 1, range: 1 });

                    rows.forEach(function (row) {
                        if (row.some(cellContent => cellContent.trim() !== "")) { // Verificar se algum dado da linha está preenchido
                            var newRow = table.insertRow(-1);
                            var cellIndex = 0;

                            for (const key in row) {
                                if (row.hasOwnProperty(key)) {
                                    var cell = newRow.insertCell(cellIndex++);
                                    cell.textContent = row[key];
                                }
                            }

                            var celulaAcoes = newRow.insertCell(cellIndex); // Adicionar célula para ações
                            adicionarBotoesLinhaAtualizar(celulaAcoes, newRow); // Chamar a função para adicionar botões
                        }
                    });

                    destacarCPFsInvalidos(); // Verifica CPFs inválidos após adicionar novas linhas
                };
                reader.readAsArrayBuffer(file);
            }

            function adicionarBotoesLinhaAtualizar(celulaAcoes, linha) {
                // Verificar se a linha contém dados antes de adicionar os botões
                var hasData = Array.from(linha.cells).some(cell => cell.textContent.trim() !== "");

                if (hasData) {
                    var botaoExcluir = document.createElement("button");
                    botaoExcluir.textContent = "Excluir";
                    botaoExcluir.className = 'btn table-btn';
                    botaoExcluir.onclick = function (event) {
                        event.preventDefault(); // Prevenir a ação padrão de submissão do formulário
                        if (confirm("Tem certeza de que deseja excluir esta linha?")) {
                            excluirLinhaAtualizar(linha);
                            destacarCPFsInvalidos();
                        }
                    };
                    celulaAcoes.appendChild(botaoExcluir);

                    var botaoAtualizar = document.createElement("button");
                    botaoAtualizar.textContent = "Atualizar";
                    botaoAtualizar.className = 'btn table-btn';
                    botaoAtualizar.onclick = function (event) {
                        event.preventDefault(); // Prevenir a ação padrão de submissão do formulário
                        carregarDadosParaEditar(linha);
                        // Mostrar o botão de confirmação de atualização
                        var botaoConfirmarAtualizacao = document.getElementById('botaoConfirmarAtualizacao');
                        botaoConfirmarAtualizacao.setAttribute('data-pessoa-id', linha.cells[1].textContent); // Exemplo de atributo com CPF
                        botaoConfirmarAtualizacao.style.display = 'inline-block';
                    };
                    celulaAcoes.appendChild(botaoAtualizar);
                }

                celulaAcoes.style.textAlign = "center"; // Centralizar os botões na célula
                destacarCPFsInvalidos(); // Verificar CPFs da nova linha
            }

            function excluirLinhaAtualizar(linha) {
                linha.parentElement.removeChild(linha);
            }

            // //DANDO CONFLITO COM O CRIAR EVENTOS------------------------------------------------------------------------------------------
            // function carregarDadosParaEditar(linha) {
            //     // Obter os dados da linha
            //     var nome = linha.cells[0].textContent;
            //     var cpf = linha.cells[1].textContent;
            //     var email = linha.cells[2].textContent;
            //     var texto = linha.cells[3].textContent;

            //     // Preencher os campos de entrada com os dados da linha
            //     document.getElementById('inputNomeAtualizar').value = nome;
            //     document.getElementById('inputCPFAtualizar').value = cpf;
            //     document.getElementById('inputEmail1Atualizar').value = email; // Ajustado para o ID correto
            //     document.getElementById('inputTextoAtualizar').value = texto;

            //     // Exibir o botão de confirmação de atualização
            //     document.getElementById('botaoConfirmarAtualizacao').style.display = 'inline-block'; // Ajustado para o ID correto

            //     // Adicionar um atributo à linha para identificá-la durante a confirmação
            //     linha.setAttribute('data-editing', 'true');

            //     // Lógica adicional, se necessário, para manipular a linha selecionada
            // }


            document.getElementById('btnConfirmarAtualizacao').onclick = function (event) {
                event.preventDefault(); // Prevenir a ação padrão de submissão do formulário

                // Obter a linha que está sendo editada
                var linhas = document.querySelectorAll('#tabelaAtualizar tbody tr');
                var linhaEditando = null;

                linhas.forEach(function (linha) {
                    if (linha.getAttribute('data-editing') === 'true') {
                        linhaEditando = linha;
                    }
                });

                if (linhaEditando) {
                    // Atualizar a linha com os novos dados dos campos de entrada
                    linhaEditando.cells[0].textContent = document.getElementById('inputNomeAtualizar').value;
                    linhaEditando.cells[1].textContent = document.getElementById('inputCPFAtualizar').value;
                    linhaEditando.cells[2].textContent = document.getElementById('inputEmailAtualizar').value;
                    linhaEditando.cells[3].textContent = document.getElementById('inputTextoAtualizar').value;

                    // Remover o atributo de edição
                    linhaEditando.removeAttribute('data-editing');

                    // Esconder o botão de confirmação de atualização
                    document.getElementById('btnConfirmarAtualizacao').style.display = 'none';
                }
            }

            function destacarCPFsInvalidos() {
                var tabela = document.getElementById('tabelaAtualizar');
                var linhas = tabela.rows;

                for (var i = 1; i < linhas.length; i++) {
                    var cpf = linhas[i].cells[1].textContent.trim(); // Coluna do CPF

                    if (!validarCPF(cpf)) {
                        linhas[i].style.backgroundColor = '#f8d7da'; // Destacar linha com CPF inválido
                    } else {
                        linhas[i].style.backgroundColor = ''; // Remover destaque se CPF for válido
                    }
                }
            }

            // Função para validar CPF 
            function validarCPF(cpf) {
                // Implemente aqui sua lógica de validação de CPF
                // Retorna true se válido, false se inválido
                return true; // Exemplo simples, ajuste conforme sua necessidade
            }

            // Event listener para chamar a função de importação ao selecionar um arquivo
            document.getElementById('excelFileAtualizar').addEventListener('change', importarExcelAtualizar);



        

    </script>
</body>
</html>
